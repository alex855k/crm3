@using CRM.Application.Core.Resources.Customers
@using CRM.Application.Core.Resources.TimeRegistrations
@using Microsoft.AspNet.Identity;
@model CRM.Application.Core.ViewModels.CaseAssignmentViewModel
@{
    Layout = null;
}
@Html.Hidden("hiddenCurrentUserId", User.Identity.GetUserId(), new { id = "hiddenCurrentUserId" })

<div class="modal-dialog modal-lg">
    <div class="modal-content" id="assignmentModalContent">
        <div style="background: forestgreen;" class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                &times;
            </button>
            <h4 class="modal-title" style="color: white" id="assignmentsModalLabel">@Customer.Assignments</h4>
        </div>
        <div class="modal-body">

            @*<div style="max-height: 300px; padding-bottom: 15px; width:auto; overflow:auto;" >*@
            @*<div style="padding-right:0px" class="row col-md-12">*@
            <div class="panel-group smart-accordion-default" id="accordion-2">

                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title"><a data-toggle="collapse" data-parent="#accordion-2" href="#collapseCreate-1" aria-expanded="false" class="collapsed"> <i class="fa fa-fw fa-plus-circle txt-color-green"></i> <i class="fa fa-fw fa-minus-circle txt-color-red"></i>@TimeReg.Create</a></h4>
                    </div>
                    <div id="collapseCreate-1" class="panel-collapse collapse" aria-expanded="false" style="height: 0px;">
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="assignmentTitle">@Customer.Title</label>
                                        <input class="form-control" placeholder="@Customer.Assignment @Customer.Title" id="assignmentTitle" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="assignmentResponsible">@Customer.Assignment @Customer.Responsible</label>
                                        <select class="form-control" id="assignmentResponsible" />
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label for="assignmentDescription">@Customer.Description</label>
                                        <textarea class="form-control" id="assignmentDescription" placeholder="@Customer.Assignment @Customer.Description" rows="5" required></textarea>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <label for="assignmentStart">@Customer.Assignment @TimeReg.Start</label>
                                    <input id="assignmentStart" placeholder="@TimeReg.Start" class="form-control" type="text">
                                </div>
                                <div class="col-md-6">
                                    <label for="assignmentDeadlineDate">@Customer.Assignment @Customer.Deadline</label>
                                    <input id="assignmentDeadlineDate" placeholder="@Customer.Deadline" class="form-control" type="text">
                                </div>
                            </div>
                            @*<div class="row">
                                <div class="col-md-3">
                                    <p style="align-content:center">i am a col<p />
                                </div>
                                <div class="col-md-3">
                                    <p style="align-content:center">i am a col<p />
                                </div>
                                <div class="col-md-3">
                                    <p style="align-content:center">i am a col<p />
                                </div>
                                <div class="col-md-3">
                                    <p style="align-content:center">i am a col<p />
                                </div>
                            </div>*@
                            <div class="row">
                                <div class="col-md-3">
                                    <label>@Customer.EstimatedTimeRequired</label>
                                    <div id="EstimatedTime">

                                        <input class=" col-md-2 form-control spinner-left" id="assignmentEstimatedHour-spinner" name="spinner" value="1"> <text> : </text>
                                        <input class="col-md-2 form-control spinner" id="assignmentEstimatedMinute-spinner" name="spinner" value="0">
                                    </div>
                                </div>
                                <div class="col-md-2 smart-form">
                                    <label for="addToEstimate">+ @Customer.Estimate</label>
                                    <label style="margin-top: 6px;" class="toggle">
                                        <input id="addToEstimate" type="checkbox" name="checkbox-toggle">
                                        <i style="left: 0;" data-swchon-text="ON" data-swchoff-text="OFF"></i>
                                    </label>
                                </div>
                                <div class="col-md-1 smart-form">
                                    <label for="urgent">@CustomerCase.Urgent</label>
                                    <label style="margin-top: 6px;" class="checkbox">

                                        <input id="urgent" name="urgent" type="checkbox" />
                                        <i></i>
                                    </label>
                                </div>
                                <div class="col-md-6 smart-form">
                                    <div class="">
                                        <label for="otherAssignment">@Customer.LinkedAssignment</label>
                                        <select class="form-control" id="otherAssignment"></select>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <div>
                                <button type="button" class="btn btn-default" data-dismiss="modal">
                                    @TimeReg.Cancel
                                </button>
                                <button type="button" data-loading-text="Saving..." class="btn btn-primary" id="saveAssignmentBtn">
                                    @TimeReg.Create
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <table id="assignmentsTable" class="projects-table table table-striped table-bordered table-hover dataTable no-footer" cellspacing="0" width="100%" role="grid" aria-describedby="example_info" style="width: 100%;">
                <thead>
                    <tr style="width: 100%">
                        <th class="sorting_asc" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-sort="ascending">Title</th>
                        <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1">@Customer.Responsible</th>
                        <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1">@TimeReg.Start</th>
                        <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1">@Customer.Deadline</th>
                        <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1">@Customer.Estimated (hh:mm)</th>
                        <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1"><button data-caseId="" id="assignmentTableReload" class="btn btn-xs btn-danger"><i class="fa fa-refresh"></i></button></th>
                    </tr>
                </thead>
                <tbody id="AssignmentsTBody"></tbody>
            </table>
            <div class="panel-group smart-accordion-default" id="accordion-2">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title"><a data-toggle="collapse" data-parent="#accordion-2" href="#collapseTwo-1" aria-expanded="false" class="collapsed"> <i class="fa fa-fw fa-plus-circle txt-color-green"></i> <i class="fa fa-fw fa-minus-circle txt-color-red"></i>@Customer.FinishedAssignments</a></h4>
                    </div>
                    <div id="collapseTwo-1" class="panel-collapse collapse" aria-expanded="false" style="height: 0px;">
                        <div class="panel-body">
                            <table id="assignmentsDoneTable" class="projects-table table table-striped table-bordered table-hover dataTable no-footer" cellspacing="0" width="100%" role="grid" aria-describedby="example_info" style="width: 100%;">
                                <thead>
                                    <tr style="width: 100%">
                                        <th class="sorting_asc" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-sort="ascending">@Customer.Title</th>
                                        <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1">@Customer.Responsible</th>
                                        <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1">@TimeReg.Start</th>
                                        <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1">@TimeReg.End</th>
                                        <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1">@Customer.Estimated (hh:mm)</th>
                                        <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1"><button data-caseId="" id="assignmentDoneTableReload" class="btn btn-xs btn-danger"><i class="fa fa-refresh"></i></button></th>
                                    </tr>
                                </thead>
                                <tbody id="AssignmentsDoneTBody"></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div><!-- /.modal-body -->

    </div><!-- /.modal-content -->
</div><!-- /.modal-dialog -->


<link href="~/Scripts/plugin/bootstrap-datepicker/css/bootstrap-datepicker.min.css" rel="stylesheet" />
<script src="~/Scripts/plugin/bootstrap-datepicker/js/bootstrap-datepicker.min.js"></script>
<script src="~/Scripts/moment.min.js"></script>
<script src="~/Scripts/plugin/datetimepicker/js/bootstrap-datetimepicker.min.js"></script>
<script src="~/Scripts/plugin/locale/da.js"></script>
<link href="~/Scripts/plugin/datetimepicker/css/bootstrap-datetimepicker.min.css" rel="stylesheet" />

<script type="text/javascript">
    //$(document).ready(function{
    //    let validator = form.validate({
    //        debug: true,
    //        rules:
    //        {
    //            testInput: "required",
    //            StartDateTime: "required",
    //            Deadline: "required",
    //        },
    //        messages:
    //        {
    //            testInput: "this field is required",
    //            StartDateTime: "this field is required",
    //            Deadline: "this field is required",
    //        }
    //    });
    //});
        //Assignment open close
    $(document).off("click", ".Assignment");
    $(document).on("click", ".Assignment", function () {
            const tr = $(this).parent()[0];
        const id = $(tr).attr("data-assignmentId");
            $(tr).toggleClass("shown");
            if ($(tr).hasClass("shown")) {
                $(`#Assignment${id}`).show();
            } else {
                $(`#Assignment${id}`).hide();
            }
        });

    //Assignment modal open, load and INIT
    $(document).off("click", ".assignmentsBtn");
    $(document).on("click", ".assignmentsBtn",function() {

            const caseId = $(this).attr("data-case-id");
            $("#AssignmentModal").modal("show");
            $("#AssignmentModal").attr("data-caseId", $(this).attr("data-case-id"));
            $("#assignmentEstimatedHour-spinner").spinner();
            $("#assignmentEstimatedMinute-spinner").spinner();
            $("#assignmentEstimatedHour-spinner").spinner({
                step: 1.0,
                numberFormat: "n",
                min: 0
            });
            $("#assignmentEstimatedMinute-spinner").spinner({
                step: 5.0,
                numberFormat: "n",
                min: 0,
                max: 59
            });
            $("#assignmentEstimatedMinute-spinner").parent().css("width", "46%");
            $("#assignmentEstimatedHour-spinner").parent().css("width", "46%");
            clearAssignmentModal();
            $("#assignmentResponsible").empty();
            $("#otherAssignment").empty();


        $("#assignmentTableReload").attr("data-caseId", caseId);
            getAssignmentsTable(caseId);
        getUsersNames($("#assignmentResponsible"));
    });

    function getUsersNames($el) {
        $.ajax({
            url: "/CustomerCases/GetUsersNames",
            data: {},
            success: function(data) {
                $.each(data.Users,
                    function(index, item) {
                        var lastName = "";
                        if (item.LastName === null) {
                            console.log("null lastname");
                        }
                        if (item.LastName != null) {
                            lastName = item.LastName;
                        };

                        $($el).append(
                            `<option value=${item.Id}>${item.FirstName} ${lastName}</option>`
                        );
                    });
            },
            error: function(error) {
            }
        });
    }

    function clearAssignmentModal() {

        $("#assignmentTitle").val("");
        $("#assignmentDescription").val("");
        $("#assignmentStart").val("");
        $("#otherAssignment").empty();
    }

    $("#assignmentTableReload").click(function() {
        let id = parseInt($("#assignmentTableReload").attr("data-caseId"));
        $("#otherAssignment").empty();
        getAssignmentsTable(id);
    });
    $("#assignmentDoneTableReload").click(function () {
        let id = parseInt($("#assignmentTableReload").attr("data-caseId"));
        getAssignmentsTable(id);
    });
        // Gets and makes tables in the modal.
        function getAssignmentsTable(caseId) {
            $("#AssignmentsTBody").empty();
            $("#AssignmentsDoneTBody").empty();

            $.ajax({
                url: "/CustomerCases/GetCaseAssignments",
                data: { 'caseId': caseId },
                dataType: "json",
                success: function(data) {
                    $("#otherAssignment").append(`<option value="null">@Customer.None</option>`);
                    $.each(data.AssignmentsList,
                        function(index, item) {
                            $("#otherAssignment").append(`<option value=${item.Id}>${item.Title}</option>`);
                        });
                    //Active Assignment List
                    $.each(data.AssignmentsList.filter(x => x.Done === null || x.Done === false),
                        function(i, item) {

                            var linkedTitle = "@Customer.None";
                            if (item.LinkedCaseAssignmentId != null) {
                                linkedTitle =
                                    (data.AssignmentsList.find(x => item.LinkedCaseAssignmentId === x.Id)).Title;
                            };
                            $("#assignmentsTable").append(
                                `<tr id="${item.Id}-assignment" data-plusesti="${item.AddToCaseEstimate}" data-assignmentId="${item.Id}" data-caseid="${item.CustomerCaseId}" data-ended="false" class="AssignmentRemove${item.Id} even expandCollapseDetails">
                                        <td style="max-width:150px; word-wrap:break-word" id="AssignmentTitle-${item.Id}" data-editable-${item.Id} style="display: block;">${item.Title}</td>
                                        <td data-value="${item.UserId}" data-editable-${item.Id} id="${item.Id}-responsible">${item.User.FirstName} ${item.User.LastName}</td>
                                        <td id="AssignmentDateTime-start-${item.Id}" data-editable-${item.Id}>${moment(new Date(parseInt((item.StartDateTime).replace(/\/Date\((-?\d+)\)\//, "$1")))).format("DD.MM.YYYY HH:mm")}</td>
                                        <td id="AssignmentDateTime-Deadline-${item.Id}" data-editable-${item.Id}>${moment(new Date(parseInt((item.Deadline).replace(/\/Date\((-?\d+)\)\//, "$1")))).format("DD.MM.YYYY HH:mm")}</td>

                                        <td id="${item.Id}-interval" data-editable-${item.Id}>${moment.duration(item.EstimatedTimeSpan).format("HH:mm", { trim: false })}</td>
                                        <td style="width: 15px" class="details-control Assignment"></td>

                                        <tr class="Assignment AssignmentRemove${item.Id}" id="Assignment${item.Id}" style="display: none">
                                            <td colspan="6">
                                                <table cellpadding="5" cellspacing="0" border="0" class="table table-hover table-condensed">
                                                    <tbody>
                                                        <tr>
                                                            <td>@Customer.LinkedAssignment:</td>
                                                            <td data-value="${item.LinkedCaseAssignmentId}" style="max-width:150px; word-wrap:break-word" id="${item.Id}-linkedAssignment" data-editable-${item.Id}>${linkedTitle}  </td>
                                                        </tr>
                                                        <tr>
                                                            <td>@TimeReg.Description:</td>
                                                            <td style="max-width:150px; word-wrap:break-word" id="AssignmentDescription-${item.Id}" data-editable-${item.Id}>${item.Description}</td>
                                                        </tr>
                                                        <tr>
                                                            <td id="${item.Id}-assignmentsActions">
                                                                <button id="${item.Id}-endAssignmentBtn" style="margin-right: 10px" data-Assignment-id="${item.Id} "data-case-id="${caseId}" class="btn btn-xs endAssignmentBtn btn-warning pull-left">@Customer.End</button>
                                                                <button id="${item.Id}-editAssignmentBtn" style="margin-right: 10px" data-Assignment-id="${item.Id}" class="btn btn-xs editAssignmentBtn btn-info pull-left">@TimeReg.Edit</button>
                                                                <button id="${item.Id}-DeleteBtn" data-Assignment-id="${item.Id}" class="btn btn-xs deleteAssignmentBtn btn-danger pull-left">@TimeReg.Delete</button>
                                                            </td>
                                                            <td></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tr>`);
                        }
                    );
                    //Ended Assignment list
                    $.each(data.AssignmentsList.filter(x => x.Done === true),
                        function(i, item) {
                            var endDate;
                            if (item.EndDateTime === null) {
                                endDate = "@Customer.NotDone";
                            } else {
                                endDate = moment(
                                        new Date(parseInt((item.EndDateTime).replace(/\/Date\((-?\d+)\)\//, "$1")))).format("DD.MM.YYYY HH:mm");
                            }
                            var linkedTitle = "@Customer.None";
                            if (item.LinkedCaseAssignmentId != null) {
                                linkedTitle =
                                    (data.AssignmentsList.find(x => item.LinkedCaseAssignmentId === x.Id)).Title;
                            };
                            $("#assignmentsDoneTable").append(
                                `<tr id="${item.Id}-assignment" data-plusesti="${item.AddToCaseEstimate}" data-assignmentId="${item.Id}" data-caseid="${item.CustomerCaseId}" data-ended="true" class="AssignmentRemove${item.Id} even expandCollapseDetails">
                                        <td style="max-width:150px; word-wrap:break-word" id="AssignmentTitle-${item.Id}" data-editable-${item.Id} style="display: block;">${item.Title}</td>
                                        <td data-value="${item.UserId}"data-editable-${item.Id} id="${item.Id}-responsible">${item.User.FirstName} ${item.User.LastName}</td>
                                        <td id="AssignmentDateTime-start-${item.Id}" data-editable-${item.Id}>${moment(new Date(parseInt((item.StartDateTime).replace(/\/Date\((-?\d+)\)\//, "$1")))).format("DD.MM.YYYY HH:mm")}</td>
                                        <td id="AssignmentDateTime-Ended-${item.Id}" data-editable-${item.Id}>${endDate}</td>

                                        <td id="${item.Id}-interval" data-editable-${item.Id}>${moment.duration(item.EstimatedTimeSpan).format("HH:mm", { trim: false })}</td>
                                        <td style="width: 15px" class="details-control Assignment"></td>

                                        <tr class="Assignment AssignmentRemove${item.Id}" id="Assignment${item.Id}" style="display: none">
                                            <td colspan="6">
                                                <table cellpadding="5" cellspacing="0" border="0" class="table table-hover table-condensed">
                                                    <tbody>
                                                        <tr>
                                                            <td>@Customer.Deadline:</td>
                                                            <td id="AssignmentDateTime-Deadline-${item.Id}" data-editable-${item.Id}>${moment(new Date(parseInt((item.Deadline).replace(/\/Date\((-?\d+)\)\//, "$1")))).format("DD.MM.YYYY HH:mm")}</td>
                                                        </tr>
                                                        <tr>
                                                            <td>@Customer.LinkedAssignment:</td>
                                                            <td data-value="${item.LinkedCaseAssignmentId}" style="max-width:150px; word-wrap:break-word" id="${item.Id}-linkedAssignment" data-editable-${item.Id}>${linkedTitle}  </td>
                                                        </tr>
                                                        <tr>
                                                            <td>@TimeReg.Description:</td>
                                                            <td style="max-width:150px; word-wrap:break-word" id="AssignmentDescription-${item.Id}" data-editable-${item.Id}>${item.Description}</td>
                                                        </tr>
                                                        <tr>
                                                            <td id="${item.Id}-assignmentsActions">
                                                                <button id="${item.Id}-restartAssignmentBtn" style="margin-right: 10px" data-Assignment-id="${item.Id} "data-case-id="${caseId}" class="btn btn-xs restartAssignmentBtn btn-warning pull-left">@Customer.Restart</button>
                                                                <button id="${item.Id}-editAssignmentBtn" style="margin-right: 10px" data-Assignment-id="${item.Id}" class="btn btn-xs editAssignmentBtn btn-info pull-left">@TimeReg.Edit</button>
                                                                <button id="${item.Id}-DeleteBtn" data-Assignment-id="${item.Id}" class="btn btn-xs deleteAssignmentBtn btn-danger pull-left">@TimeReg.Delete</button>
                                                            </td>
                                                            <td></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tr>`);
                            if (item.Done === true) {
                            }
                        }
                    );
                },
                error: function() {
                    toastr.error("Could not fetch Time Registration");
                }
            });
        }

            //ends assignment
    $(document).off("click", ".endAssignmentBtn");
        $(document).on("click",".endAssignmentBtn",function() {
                const now = moment();
                const id = parseInt($(this).attr("data-Assignment-id"));
                const caseId = parseInt($(this).attr("data-case-id"));

                $.ajax({
                    url: "/CustomerCases/EndCaseAssignment",
                    data: { AssignmentId: id, EndDateTime: now.toISOString() },
                    success: function(data) {
                        getAssignmentsTable(caseId);
                    },
                    error: function(data) {
                        toastr.error("@Customer.Ending @Customer.Case @Customer.failed");
                    }
                });
            });

        //restarts assignment
    $(document).off("click", ".restartAssignmentBtn");
        $(document).on("click",".restartAssignmentBtn",function() {
                const id = parseInt($(this).attr("data-Assignment-id"));
                const caseId = parseInt($(this).attr("data-case-id"));

                $.ajax({
                    url: "/CustomerCases/RestartCaseAssignment",
                    data: { AssignmentId: id },
                    success: function(data) {
                        getAssignmentsTable(caseId);
                    },
                    error: function(data) {
                        toastr.error("@Customer.Restarting @Customer.failed");

                    }
                });
            });

        //Deletes assignment
    $(document).off("click", ".deleteAssignmentBtn");
        $(document).on("click",".deleteAssignmentBtn",function() {
                var AssignmentId = parseInt($(this).attr("data-Assignment-id"));
                $.SmartMessageBox({
                        title: "@TimeReg.Delete?",
                        content: "@TimeReg.RUSure @TimeReg.TimeRegistration",
                        buttons: "[@TimeReg.No][@TimeReg.Yes]"
                    },
                    function(ButtonPressed) {
                        if (ButtonPressed === "@TimeReg.Yes") {

                            $.ajax({
                                url: "/CustomerCases/DeleteCaseAssignment",
                                data: { AssignmentId: AssignmentId },
                                success: function(data) {
                                    //getAssignmenttable($("#AssignmentModal").attr("data-caseId"));
                                    $(`.AssignmentRemove${AssignmentId}`).fadeOut(300, function() { $(this).remove(); });
                                },
                                error: function(data) {
                                    toastr.error("@TimeReg.Delete @Customer.failed");

                                }
                            });
                        }
                        if (ButtonPressed === "@TimeReg.No") {
                            $.smallBox({
                                iconSmall: "fa fa-times fa-2x fadeInRight animated",
                                timeout: 4000
                            });
                        }
                    }
                );
        });
    // Save assignment
     $(document).on("click", "#saveAssignmentBtn", function () {
        var $btn = $(this).button("loading");
        var caseId = $("#AssignmentModal").attr("data-caseId");
        var otherAssignment = parseInt($("#otherAssignment").val()) || null;
        var estimatedTimeSpan = moment
            .duration(`PT${parseInt($("#assignmentEstimatedHour-spinner").val())}H${parseInt($("#assignmentEstimatedMinute-spinner").val())}M`).toISOString();
        let assignment = {
            "Id": null,
            "StartDateTime": $("#assignmentStart").data("DateTimePicker").date().toISOString(),
            "Deadline": $("#assignmentDeadlineDate").data("DateTimePicker").date().toISOString(),
            "CustomerCaseId": caseId,
            "LinkedCaseAssignmentId": otherAssignment,
            "Description": $("#assignmentDescription").val(),
            "Title": $("#assignmentTitle").val(),
            "AddToCaseEstimate": $("#addToEstimate").prop("checked"),
            "UserId": $("#assignmentResponsible").val(),
        };
        console.log(assignment);
        $.ajax({
            url: "/CustomerCases/CreateAssignment",
            type: "Post",
            data: { 'assignment': assignment, "EstimatedTimeSpan": estimatedTimeSpan },
            success: function(data) {
                $btn.button("reset");

                if ($("#addToEstimate").prop("checked")) {
                    const oldTimeEstimate = moment.duration($(`#${caseId}-EstimatedTimeSpan`).text());
                    const newTimeEstimate = oldTimeEstimate.add(moment.duration(estimatedTimeSpan));
                    $(`#${caseId}-EstimatedTimeSpan`)
                        .text(`${moment.duration(newTimeEstimate).format("HH:mm", { trim: false })}`);
                }
                toastr.success("@Customer.Case @TimeReg.Saved");

                clearAssignmentModal();
                getAssignmentsTable(caseId);
            },
            error: function() {
                $btn.button("reset");
                toastr.error("@TimeReg.Saving @Customer.Case @Customer.failed");
            }
        });
    });
    //Makes it so the user can edit an assignment
    $(document).off("click", ".editAssignmentBtn");
    $(document).on("click", ".editAssignmentBtn",function() {
        var assignmentId = parseInt($(this).attr("data-Assignment-id"));
        var $el = $(`[data-editable-${assignmentId}]`);
        $(this).replaceWith(`<button id="${assignmentId}-saveAssignmentBtn" style="margin-right: 10px" data-Assignment-id="${
            assignmentId}" class="btn btn-xs editSaveAssignmentBtn btn-success pull-left">@TimeReg.Save</button>
                 <button id="${assignmentId}-cancelAssignmentBtn" data-Assignment-id="${assignmentId
            }" style="margin-right: 10px" class="btn btn-xs cancelAssignmentBtn btn-normal pull-left">@TimeReg.Cancel</button>`);

        $.each($el,
            function(i, item) {
                const $width = $($el[i]).width();
                const $id = $($el[i]).prop("id");
                if ($id === `${assignmentId}-linkedAssignment`) {
                    let val = parseInt($(`#${assignmentId}-linkedAssignment`).data("value"));
                    $(item).attr(`data-saveable-${assignmentId}`, "");
                    $(item).removeAttr(`data-editable-${assignmentId}`);
                    const content = $("#otherAssignment").clone();
                    content.prop("id", `${assignmentId}-linkedDropdown`);
                    $(`#${assignmentId}-linkedAssignment`).empty();
                    $(`#${assignmentId}-linkedAssignment`).append(content);
                    $(`#${assignmentId}-linkedDropdown`).val(val);
                } else if ($id === `${assignmentId}-responsible`) {
                    let val = parseInt($(`#${assignmentId}-linkedAssignment`).data("value"));

                    $(item).attr(`data-saveable-${assignmentId}`, "");
                    $(item).removeAttr(`data-editable-${assignmentId}`);
                    const content = $("#assignmentResponsible").clone();
                    $(`#${assignmentId}-responsible`).empty();
                    $(`#${assignmentId}-responsible`).append(content);
                    $(`#${assignmentId}-linkedDropdown`).val(val);
                } else if ($id === `${assignmentId}-interval`) {

                    $(item).attr(`data-saveable-${assignmentId}`, "");
                    $(item).removeAttr(`data-editable-${assignmentId}`);
                    const oldContent = $(`#${assignmentId}-interval`).text().split(":");
                    const content =
                        `<input class=" col-md-2 form-control spinner-left" id="${assignmentId
                            }-EditEstimatedHour-spinner" name="spinner" value="1"> <text> : </text>
                                        <input class="col-md-2 form-control spinner" id="${assignmentId
                            }-EditEstimatedMinute-spinner" name="spinner" value="0">`;
                    $(`#${assignmentId}-interval`).empty();
                    $(`#${assignmentId}-interval`).append(content);

                    $(`#${assignmentId}-EditEstimatedHour-spinner`).spinner({
                        step: 1.0,
                        numberFormat: "n",
                        min: 0
                    });
                    $(`#${assignmentId}-EditEstimatedMinute-spinner`).spinner({
                        step: 5.0,
                        numberFormat: "n",
                        min: 0,
                        max: 59
                    });
                    $(`#${assignmentId}-EditEstimatedMinute-spinner`).parent().css("width", "58px");
                    $(`#${assignmentId}-EditEstimatedHour-spinner`).parent().css("width", "58px");

                    $(`#${assignmentId}-EditEstimatedMinute-spinner`).val(oldContent[1]);
                    $(`#${assignmentId}-EditEstimatedHour-spinner`).val(oldContent[0]);
                } else {
                    const $td = $(`<td style='width: ${$width}px'> </td>`);
                    const $input =
                        $(`<input class="datepicker form-control" id="${$id}" data-saveable-${assignmentId
                            } style="width:${$width}px"/>`).val($(item).text());

                    $($td).append($input);
                    $(item).replaceWith($td);
                }
            });

        $(`#AssignmentDateTime-start-${assignmentId}`).datetimepicker({
            locale: "da",
            sideBySide: true
        });
        $(`#AssignmentDateTime-Deadline-${assignmentId}`).datetimepicker({
            locale: "da",
            sideBySide: true
        });
        if ($(`#${assignmentId}-assignment`).data("ended")) {
           $(`#AssignmentDateTime-Ended-${assignmentId}`).datetimepicker({
                locale: "da",
                sideBySide: true
            });
        }
    });

    function assignmentTrCancel($el, assignmentId) {
        $(`#${assignmentId}-cancelAssignmentBtn`).replaceWith(
            `<button id="${assignmentId}-editAssignmentBtn" data-Assignment-id="${assignmentId
            }" class="btn btn-xs editAssignmentBtn btn-info pull-left">@TimeReg.Edit</button> `);
        $(`#${assignmentId}-saveAssignmentBtn`).remove();
        $.each($el,function(i, item) {
                const $id = $($el[i]).prop("id");
                if ($id === `${assignmentId}-linkedAssignment`) {
                    const selected = $(item).children().find(":selected").text();
                    $(`#${assignmentId}-linkedAssignment`).empty();
                    $(`#${assignmentId}-linkedAssignment`).append(selected);
                    $(item).attr(`data-editable-${assignmentId}`, "");
                    $(item).removeAttr(`data-saveable-${assignmentId}`);
                } else if ($id === `${assignmentId}-responsible`) {
                    const selected = $(item).children().find(":selected").text();
                    $(`#${assignmentId}-responsible`).empty();
                    $(`#${assignmentId}-responsible`).append(selected);
                    $(item).attr(`data-editable-${assignmentId}`, "");
                    $(item).removeAttr(`data-saveable-${assignmentId}`);
                } else if ($id === `${assignmentId}-interval`) {

                    const dur = moment.duration({
                        minutes: $(`#${assignmentId}-EditEstimatedMinute-spinner`).val(),
                        hours: $(`#${assignmentId}-EditEstimatedHour-spinner`).val()
                        }).format("HH:mm", { trim: false });
                    $(`#${assignmentId}-interval`).empty();
                    $(`#${assignmentId}-interval`).text(dur);
                    $(item).attr(`data-editable-${assignmentId}`, "");
                    $(item).removeAttr(`data-saveable-${assignmentId}`);
                } else {
                    const $td = $(`<td data-editable-${assignmentId} id=${$id}>${$(item).val()} </td>`);
                    $(item).parent().replaceWith($td);
                }
            }
        );
    };

    // returns the assignment to normal
    $(document).off("click", ".cancelAssignmentBtn");
        $(document).on("click", ".cancelAssignmentBtn", function () {
                var AssignmentId = parseInt($(this).attr("data-Assignment-id"));
                var $el = $(`[data-saveable-${AssignmentId}]`);


            assignmentTrCancel($el, AssignmentId);

            $.ajax({
                url: "/CustomerCases/GetAssignment",
                data: { "AssignmentId": AssignmentId },
                success: function (data) {
                    $(`#timeregTitle-${AssignmentId}`).text(data.Title);
                    $(`#timeregDateTime-start-${AssignmentId}`).text(moment(new Date(parseInt((data.StartDateTime).replace(/\/Date\((-?\d+)\)\//, "$1")))).format("DD.MM.YYYY HH:mm"));
                    $(`#timeregDateTime-end-${AssignmentId}`).text(moment(new Date(parseInt((data.EndDateTime).replace(/\/Date\((-?\d+)\)\//, "$1")))).format("DD.MM.YYYY HH:mm"));
                    $(`#${AssignmentId}-assignment`).text(data.CaseAssignment.Title);
                    $(`#timeregDescription-${AssignmentId}`).text(data.Description);
                },
                error: function (data) {
                    toastr.error("Error");
                }
            });
        });

        // Saves the edited assignment
    $(document).off("click", ".editSaveAssignmentBtn");
    $(document).on("click", ".editSaveAssignmentBtn", function () {
        var assignmentId = parseInt($(this).attr("data-Assignment-id"));
        var $el = $(`[data-saveable-${assignmentId}]`);
        var endDate;
        if ($(`#${assignmentId}-assignment`).data("ended")) {
            endDate = $(`#AssignmentDateTime-Ended-${assignmentId}`).data("DateTimePicker").date().toISOString();
        }
        const assignment = {
            Id: assignmentId,
            Title: $(`#AssignmentTitle-${assignmentId}`).val(),
            UserId: $(`#${assignmentId}-responsible`).children().find(":selected").val() ,
            StartDateTime: $(`#AssignmentDateTime-start-${assignmentId}`).data("DateTimePicker").date().toISOString(),
            Deadline: $(`#AssignmentDateTime-Deadline-${assignmentId}`).data("DateTimePicker").date().toISOString(),
            LinkedCaseAssignmentId: parseInt($(`#${assignmentId}-linkedAssignment`).children().find(":selected").val()),
            EstimatedTimeIsoString: moment.duration({
                minutes: $(`#${assignmentId}-EditEstimatedMinute-spinner`).val(),
                hours: $(`#${assignmentId}-EditEstimatedHour-spinner`).val()
            }).toISOString(),
            Description: $(`#AssignmentDescription-${assignmentId}`).val(),
            EndDateTime: endDate
            };
        $.ajax({
            url: "/CustomerCases/AssignmentEdit",
            type: "Post",
            data: { 'viewModel': assignment },
            success: function(data) {
                toastr.success("Success");
                assignmentTrCancel($el, assignmentId);

                if ($(`#${assignmentId}-assignment`).data("plusesti")) {
                    var caseId = $(`#${assignmentId}-assignment`).data("caseid");
                    $(`#${caseId}-EstimatedTimeSpan`)
                        .text(`${moment.duration(data.newCaseEstimate).format("HH:mm", { trim: false })}`);
                }
            },
            error: function(data) {
                toastr.error("@Customer.Edit @Customer.failed");

            }
        });
    });

</script>


@*<div class="modal-dialog modal-lg">
    <div class="modal-content" id="modalContent">
        <div class="modal-header">
            <div style="max-height: 500px; max-width: 100%; padding-bottom: 15px; overflow:auto;">
                <div id="myKanban"></div>

            </div>
            <button id="addDefault">Add "Default" board</button>
            <button id="addToDo">Add element in "To Do" Board</button>
            <button id="removeBoard">Remove "Done" Board</button>
            <button id="removeElement">Remove "My Task Test"</button>
        </div>

        </div>
    </div>

        <link href="~/Scripts/jKanban/jkanban.min.css" rel="stylesheet" />
        <script src="~/Scripts/jKanban/jkanban.min.js"></script>
        <script>
            var KanbanTest = new jKanban({
                element: '#myKanban',
                gutter: '10px',
                widthBoard: '300px',
                click: function (el) {
                    console.log("Trigger on all items click!");
                },
                buttonClick: function (el, boardId) {
                    console.log(el);
                    console.log(boardId);
                    // create a form to enter element
                    var formItem = document.createElement('form');
                    formItem.setAttribute("class", "itemform");
                    formItem.innerHTML = '<div class="form-group"><textarea class="form-control" rows="2" autofocus></textarea></div><div class="form-group"><button type="submit" class="btn btn-primary btn-xs pull-right">Submit</button><button type="button" id="CancelBtn" class="btn btn-default btn-xs pull-right">Cancel</button></div>'
                    KanbanTest.addForm(boardId, formItem);
                    formItem.addEventListener("submit", function (e) {
                        e.preventDefault();
                        var text = e.target[0].value
                        KanbanTest.addElement(boardId, {
                            "title": text,
                        })
                        formItem.parentNode.removeChild(formItem);
                    });
                    document.getElementById('CancelBtn').onclick = function () {
                        formItem.parentNode.removeChild(formItem)
                    }
                },
                addItemButton: true,
                boards: [
                    {
                        "id": "_todo",
                        "title": "To Do (Can drop item only in working)",
                        "class": "info,good",
                        "dragTo": ['_working'],
                        "item": [
                            {
                                "id": "_test_delete",
                                "title": "Try drag this (Look the console)",
                                "username":"test",
                                "drag": function (el, source) {
                                    console.log("START DRAG: " + el.dataset.eid);
                                },
                                "dragend": function (el) {
                                    console.log("END DRAG: " + el.dataset.eid);
                                },
                                "drop": function (el) {
                                    console.log('DROPPED: ' + el.dataset.eid)
                                }
                            },
                            {
                                "title": "Try Click This!",
                                "click": function (el) {
                                    alert("click");
                                },
                            }
                        ]
                    },
                    {
                        "id": "_working",
                        "title": "Working (Try drag me too)",
                        "class": "warning",
                        "item": [
                            {
                                "title": "Do Something!",
                            },
                            {
                                "title": "Run?",
                            }
                        ]
                    },
                    {
                        "id": "_done",
                        "title": "Done (Can drop item only in working)",
                        "class": "success",
                        "dragTo": ['_working'],
                        "item": [
                            {
                                "title": "All right",
                            },
                            {
                                "title": "Ok!",
                            }
                        ]
                    }
                ]
            });
            var toDoButton = document.getElementById('addToDo');
            toDoButton.addEventListener('click', function () {
                KanbanTest.addElement(
                    "_todo",
                    {
                        "title": "Test Add",
                    }
                );
            });
            var addBoardDefault = document.getElementById('addDefault');
            addBoardDefault.addEventListener('click', function () {
                KanbanTest.addBoards(
                    [{
                        "id": "_default",
                        "title": "Kanban Default",
                        "item": [
                            {
                                "title": "Default Item",
                            },
                            {
                                "title": "Default Item 2",
                            },
                            {
                                "title": "Default Item 3",
                            }
                        ]
                    }]
                )
            });
            var removeBoard = document.getElementById('removeBoard');
            removeBoard.addEventListener('click', function () {
                KanbanTest.removeBoard('_done');
            });
            var removeElement = document.getElementById('removeElement');
            removeElement.addEventListener('click', function () {
                KanbanTest.removeElement('_test_delete');
            });
            var allEle = KanbanTest.getBoardElements('_todo');
            allEle.forEach(function (item, index) {
                //console.log(item);
            });
        </script>*@